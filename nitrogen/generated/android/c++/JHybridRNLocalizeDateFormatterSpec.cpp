///
/// JHybridRNLocalizeDateFormatterSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridRNLocalizeDateFormatterSpec.hpp"

// Forward declaration of `DateStyle` to properly resolve imports.
namespace margelo::nitro::localizedate { enum class DateStyle; }

#include <string>
#include <vector>
#include "DateStyle.hpp"
#include "JDateStyle.hpp"

namespace margelo::nitro::localizedate {

  jni::local_ref<JHybridRNLocalizeDateFormatterSpec::jhybriddata> JHybridRNLocalizeDateFormatterSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridRNLocalizeDateFormatterSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridRNLocalizeDateFormatterSpec::initHybrid),
    });
  }

  size_t JHybridRNLocalizeDateFormatterSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridRNLocalizeDateFormatterSpec::initialize(const std::string& defaultLocale, const std::vector<std::string>& supportedLocales, DateStyle dateStyle, DateStyle timeStyle) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* defaultLocale */, jni::alias_ref<jni::JArrayClass<jni::JString>> /* supportedLocales */, jni::alias_ref<JDateStyle> /* dateStyle */, jni::alias_ref<JDateStyle> /* timeStyle */)>("initialize");
    method(_javaPart, jni::make_jstring(defaultLocale), [&]() {
      size_t __size = supportedLocales.size();
      jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        const auto& __element = supportedLocales[__i];
        __array->setElement(__i, *jni::make_jstring(__element));
      }
      return __array;
    }(), JDateStyle::fromCpp(dateStyle), JDateStyle::fromCpp(timeStyle));
  }
  std::string JHybridRNLocalizeDateFormatterSpec::format(double time) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(double /* time */)>("format");
    auto __result = method(_javaPart, time);
    return __result->toStdString();
  }

} // namespace margelo::nitro::localizedate
