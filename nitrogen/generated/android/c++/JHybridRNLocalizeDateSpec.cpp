///
/// JHybridRNLocalizeDateSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridRNLocalizeDateSpec.hpp"

// Forward declaration of `DateStyle` to properly resolve imports.
namespace margelo::nitro::localizedate { enum class DateStyle; }

#include <string>
#include "DateStyle.hpp"
#include "JDateStyle.hpp"

namespace margelo::nitro::localizedate {

  jni::local_ref<JHybridRNLocalizeDateSpec::jhybriddata> JHybridRNLocalizeDateSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridRNLocalizeDateSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridRNLocalizeDateSpec::initHybrid),
    });
  }

  size_t JHybridRNLocalizeDateSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::string JHybridRNLocalizeDateSpec::localizeTimeOnly(double time, DateStyle timeStyle) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(double /* time */, jni::alias_ref<JDateStyle> /* timeStyle */)>("localizeTimeOnly");
    auto __result = method(_javaPart, time, JDateStyle::fromCpp(timeStyle));
    return __result->toStdString();
  }
  std::string JHybridRNLocalizeDateSpec::localizeDateOnly(double time, DateStyle dateStyle) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(double /* time */, jni::alias_ref<JDateStyle> /* dateStyle */)>("localizeDateOnly");
    auto __result = method(_javaPart, time, JDateStyle::fromCpp(dateStyle));
    return __result->toStdString();
  }

} // namespace margelo::nitro::localizedate
