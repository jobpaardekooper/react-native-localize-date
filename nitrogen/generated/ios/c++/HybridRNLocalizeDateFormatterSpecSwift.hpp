///
/// HybridRNLocalizeDateFormatterSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridRNLocalizeDateFormatterSpec.hpp"

// Forward declaration of `HybridRNLocalizeDateFormatterSpec_cxx` to properly resolve imports.
namespace NitroLocalizeDate { class HybridRNLocalizeDateFormatterSpec_cxx; }

// Forward declaration of `StringHolder` to properly resolve imports.
namespace margelo::nitro::localizedate { struct StringHolder; }
// Forward declaration of `DateStyle` to properly resolve imports.
namespace margelo::nitro::localizedate { enum class DateStyle; }

#include <string>
#include <vector>
#include "StringHolder.hpp"
#include "DateStyle.hpp"

#include "NitroLocalizeDate-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::localizedate {

  /**
   * The C++ part of HybridRNLocalizeDateFormatterSpec_cxx.swift.
   *
   * HybridRNLocalizeDateFormatterSpecSwift (C++) accesses HybridRNLocalizeDateFormatterSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridRNLocalizeDateFormatterSpec_cxx can directly inherit from the C++ class HybridRNLocalizeDateFormatterSpec
   * to simplify the whole structure and memory management.
   */
  class HybridRNLocalizeDateFormatterSpecSwift: public virtual HybridRNLocalizeDateFormatterSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridRNLocalizeDateFormatterSpecSwift(const NitroLocalizeDate::HybridRNLocalizeDateFormatterSpec_cxx& swiftPart):
      HybridObject(HybridRNLocalizeDateFormatterSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroLocalizeDate::HybridRNLocalizeDateFormatterSpec_cxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void initialize(const std::string& defaultLocale, const std::vector<StringHolder>& supportedLocales, DateStyle dateStyle, DateStyle timeStyle) override {
      auto __result = _swiftPart.initialize(defaultLocale, supportedLocales, static_cast<int>(dateStyle), static_cast<int>(timeStyle));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::string format(double time) override {
      auto __result = _swiftPart.format(std::forward<decltype(time)>(time));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroLocalizeDate::HybridRNLocalizeDateFormatterSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::localizedate
