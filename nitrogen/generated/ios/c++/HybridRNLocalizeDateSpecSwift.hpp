///
/// HybridRNLocalizeDateSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridRNLocalizeDateSpec.hpp"

// Forward declaration of `HybridRNLocalizeDateSpecCxx` to properly resolve imports.
namespace NitroLocalizeDate { class HybridRNLocalizeDateSpecCxx; }

// Forward declaration of `DateStyle` to properly resolve imports.
namespace margelo::nitro::localizedate { enum class DateStyle; }

#include <string>
#include "DateStyle.hpp"

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroLocalizeDate-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::localizedate {

  /**
   * The C++ part of HybridRNLocalizeDateSpecCxx.swift.
   *
   * HybridRNLocalizeDateSpecSwift (C++) accesses HybridRNLocalizeDateSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridRNLocalizeDateSpecCxx can directly inherit from the C++ class HybridRNLocalizeDateSpec
   * to simplify the whole structure and memory management.
   */
  class HybridRNLocalizeDateSpecSwift: public virtual HybridRNLocalizeDateSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridRNLocalizeDateSpecSwift(const NitroLocalizeDate::HybridRNLocalizeDateSpecCxx& swiftPart):
      HybridObject(HybridRNLocalizeDateSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroLocalizeDate::HybridRNLocalizeDateSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::string localizeTimeOnly(double time, DateStyle timeStyle) override {
      auto __result = _swiftPart.localizeTimeOnly(std::forward<decltype(time)>(time), static_cast<int>(timeStyle));
      return __result;
    }
    inline std::string localizeDateOnly(double time, DateStyle dateStyle) override {
      auto __result = _swiftPart.localizeDateOnly(std::forward<decltype(time)>(time), static_cast<int>(dateStyle));
      return __result;
    }

  private:
    NitroLocalizeDate::HybridRNLocalizeDateSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::localizedate
